1 变量申明
	1)var a int = 10  ######直接 赋值
	2)var b = 10
	3)c := 10

	4)var a int
		a = 10 ###########这种和1)很像

2 数组 其实很像
	1)var n [10]int



3 go中的结构体 就是python得set  集合

	1)type Books struct {
  		 title string
   		author string
   		subject string
   		book_id int
		}

	2)var Book1 Books   ##################此时Book1就是一个实例化得空壳子
	  Book1.title = "Go 语言"

	3)func printBook( book Books ) {
   		fmt.Printf( "Book title : %s\n", book.title);
   		fmt.Printf( "Book author : %s\n", book.author);
   		fmt.Printf( "Book subject : %s\n", book.subject);
   		fmt.Printf( "Book book_id : %d\n", book.book_id);
		}   ############book 就是Books得一个对象

   		##############1)  结构体的一个例子

		type Books struct {
		   title string
		   author string
		   subject string
		   book_id int
		}


		func main() {

		    // 创建一个新的结构体
		    fmt.Println(Books{"Go 语言", "www.runoob.com", "Go 语言教程", 6495407})

		    // 也可以使用 key => value 格式
		    fmt.Println(Books{title: "Go 语言", author: "www.runoob.com", subject: "Go 语言教程", book_id: 6495407})

		    // 忽略的字段为 0 或 空
		   fmt.Println(Books{title: "Go 语言", author: "www.runoob.com"})
		}
		输出结果为：

		{Go 语言 www.runoob.com Go 语言教程 6495407}
		{Go 语言 www.runoob.com Go 语言教程 6495407}
		{Go 语言 www.runoob.com  0}


		#############2)type Books struct {
				   title string
				   author string
				   subject string
				   book_id int
				}

				//结构体内内嵌匿名成员变量定义
				func main() {
				   a :=Books{"fuck","fuckyou","fuckass",100}
				   p := person{"abc",12}
				   fmt.Println(a,"dagai---",a.book_id,p.int)
					}

				type person struct {
					   string
					   int
					}
########## struck 初始化的时候就是 a:=Books{} 要不就是{}里面为空或者0  要不就是写全部{“ff”，“dd”，“s”，2}  要不就是通过key a := Books{title:"ssss"} 获取的时候也可以通过对象.key来获取
######################################     总结一下结构体  就是  可以把结构体当成一个类  初始化的时候 a := Books{}  如果是这样就是 4个默认的{空 空 空 0}  也可以通过struct 里面的key来赋值  豁免获取的时候也可以通过对象.key来获取    ##############################

4--------------------------------------------------
#########记着  常量的定义 const a= 10  不是 const a:= 10

func main() {
	var n int = 5
	for i := 0;i<=n;i++ {
		fmt.Printf("%d+%d=%d\n",i,n-i,n)  ########格式化输出的时候 %d是int   %s是字符串  还要用到Printf 不能用Println
	}
}
----------------------------------------------------
一个包定义成这样
var Name int = 10
var age  int = 30   如果写成 Name := 10  是不行的

-------------------------------------------------------
引用一个包  如果不用的话一定要在前面加上 import( _ "main/sub" )
-----------------------------------------------
1 << 11  ###########意思就是 1 *(2**11)
---------------------------------------------------------------------
name := "11122222222333333"
        for i:=0;i<len(name);i++ {
                fmt.Printf("%d %q\n",i,name[i])    ############这样打印就不是byte格式了 或者用到 string()转一下
        }
										下面还有一种for循环更简单

	for _,v := range name {
		fmt.Println("v")
	}


--------------------------------------------------------------------
func modify(array []int) {
	array[0] = 10 // 试图修改数组的第一个元素
	fmt.Println("In modify(), array values:", array)
}
func main() {
	array := []int{1,2,3,4,5} // 定义并初始化一个数组       
	modify(array) // 传递给一个函数，并试图在函数体内修改这个数组内容    ##############传参  感觉很奇怪
	fmt.Println("In main(), array values:", array)
}
----------------------------------------------------------------
func main() {
        var start [10]int = [10]int{1,2,3,4,5,6,7,8,9}   ##########这样也行 start = 10[int]{1}
        end := start[:5]
        fmt.Println(start)
        fmt.Println(end)
}
-----------------------------------------------------------------------------

func myfunc(args ...int) {                  ################### 函数接受不定参数  类似于python的 *args    ...int  换成 ...interface{}   就是接受任意类型的参数
	for _, arg := range args {   #######   此时这边变成一个切片  就是slice  如果下面再调用的话 可以写成 xxx(arg...)   友情提示 [python   这边接受的是元祖]
	fmt.Println(arg)
	}
} ###################但是要的多个参数中只能都是int类型   如果有一个slice  那就必须用这样 myfunc(nums...)  而且sclice里面每个元素都是int型
--------------------------------------------------------------------------------

map 创建map一般有2种方式 一个是 countryCapitalMap := map[string]int{}  但是后面一定要加{} 还有{}里面可以添加元素 但是跟定义的key value 类型一定要是相同的    第二个就用这种方式 就是一个空的{} 然后用 countryCapitalMap := make(map[string]string)

往里面添加就是  countryCapitalMap[ "France" ] = "Paris"
    		countryCapitalMap[ "Italy" ] = "罗马"
    		countryCapitalMap[ "Japan" ] = "东京"
    		countryCapitalMap[ "India " ] = "新德里"
这个就是往里面添加元素
删除元素 就是 delete(countryCapitalMap, "France")   France是key

--------------------------------------------------------------------------------------------
slice     func main() {
        	dd := []int{1,2,3,4}
        	dd = append(dd,5)
        	fmt.Println(dd)
		}

###########################################slice 也是一样的 dd := []int{}   可以设置N个 

每一个包都可以包含一个 init 函数。该函数不应该有任何参数和返回值，并且在我们的代码中不能显式调用它 

------------------------------------------------------------------------------------------------------   go的函数  --------------------------------------------------------------------------------------------------------------
1---->  func test(a string) {         ##########################       单个参数 没有返回值
        	fmt.Print("ok----",a,"\n")
	}

	func main() {
        	test("sss")
	}

2---->  func test(a string,b int) {   ##########################       多个参数 没有返回值
	        fmt.Print("ok----",a,"\n",b)
	}

	func main() {
        	test("sss",334)
	}
 
3---->  func test(a string,b int) (nidaye string){    ######################       多个参数 有返回值
	        fmt.Print("ok----",a,"\n",b)
        	nidaye = "nidaye"
        	return
	}

	func main() {
        	a := test("sss",334)
		//a = xxxxxxx            ---------------------------  如果在这边赋值 原来的值是不会变的
        	fmt.Println(a)
	}

4---->  func test(a *string,b *int) (nidaye string){    ###############   参数接受指针 有返回值
	        fmt.Print("ok----",*a,"\n",*b,"\n")
        	nidaye = "nidaye"
	        *a = "fuckyou"
       	 	*b = 100
	        return
	}

	func main() {
        	aa,bb := "sss",334        ---------------------------   之前传递的值会变
        	a := test(&aa,&bb)        ---------------------------   调用函数 传递指针   2)var p *[20]int = &a  如果定义一个指针 那前面必须是*type    ||  pp := [...]*int{&x,&y}  这种是这样的  定义一个数组 里面如果有指针 那前面必须是*type
        	fmt.Printf("-----%s------%s---%d",a,aa,bb)
	}
 
5----> func test(a []int) (nidaye string){    ########################  切片传递 和 python传递差不多 简直是一模一样  
		fmt.Print("ok----",a)
		nidaye = "nidaye"
		a[0] = 10
		return
	}

	func main() {
		aa := []int{1,2,3}
		a := test(aa)
		//fmt.Printf("-----%s------%s---%d",a,aa,bb)
		fmt.Println(a,aa)
	}

6----> func test(m map[int]string)  {      ######################   map  传递给函数
		    delete(m, 1)
		}

	func main()  {
	    m := map[int]string{1:"mike", 2:"yoyo", 3: "C++"}
	    fmt.Println("m = ", m)
	    test(m) //对函数进行修改，比如删除一个对
	    fmt.Println("m = ", m)
	}

7----> func MyPrintf(args ...interface{}) {     ##############  传递多个不定参数   
		for _, arg := range args {
		switch arg.(type) {
		case int:
			fmt.Println(arg, "is an int value.")
		case string:
			fmt.Println(arg, "is a string value.")
		case int64:
			fmt.Println(arg, "is an int64 value.")
		default:
			fmt.Println(arg, "is an unknown type.")
			}
		}
	}

	func main() {
		var v1 int = 1
		var v2 int64 = 234
		var v3 string = "hello"
		var v4 float32 = 1.234 
		MyPrintf(v1, v2, v3, v4)
	}


-------------------------------------go  调用系统命令--------------------------
package main

import(
        "fmt"
        "os/exec"
)


func main() {
        cmd := exec.Command("/bin/bash", "-c","dff -h")
        output,err := cmd.Output()
        if err != nil {
                fmt.Println("no")
                return
        }
        fmt.Println(string(output),err)
}


...int ...string  ...struct   就是一组参数的集合

-----------------------------------------------------------------------------------------------------------------------------------------
func callback(y int, f func(int, int)) {       #################函数接受一个函数名
    f(y, 2) // this becomes Add(1, 2)
}


-----------------------------------------------------------------------------------------------------------------------------
json.Marshal(stu)    struck转json
