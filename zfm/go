1 变量申明
	1)var a int = 10  ######直接 赋值
	2)var b = 10
	3)c := 10

	4)var a int
		a = 10 ###########这种和1)很像

2 数组 其实很像
	1)var n [10]int



3 go中的结构体 就是python得set  集合

	1)type Books struct {
  		 title string
   		author string
   		subject string
   		book_id int
		}

	2)var Book1 Books   ##################此时Book1就是一个实例化得空壳子
	  Book1.title = "Go 语言"

	3)func printBook( book Books ) {
   		fmt.Printf( "Book title : %s\n", book.title);
   		fmt.Printf( "Book author : %s\n", book.author);
   		fmt.Printf( "Book subject : %s\n", book.subject);
   		fmt.Printf( "Book book_id : %d\n", book.book_id);
		}   ############book 就是Books得一个对象

   		##############1)  结构体的一个例子

		type Books struct {
		   title string
		   author string
		   subject string
		   book_id int
		}


		func main() {

		    // 创建一个新的结构体
		    fmt.Println(Books{"Go 语言", "www.runoob.com", "Go 语言教程", 6495407})

		    // 也可以使用 key => value 格式
		    fmt.Println(Books{title: "Go 语言", author: "www.runoob.com", subject: "Go 语言教程", book_id: 6495407})

		    // 忽略的字段为 0 或 空
		   fmt.Println(Books{title: "Go 语言", author: "www.runoob.com"})
		}
		输出结果为：

		{Go 语言 www.runoob.com Go 语言教程 6495407}
		{Go 语言 www.runoob.com Go 语言教程 6495407}
		{Go 语言 www.runoob.com  0}


		#############2)type Books struct {
				   title string
				   author string
				   subject string
				   book_id int
				}

				//结构体内内嵌匿名成员变量定义
				func main() {
				   a :=Books{"fuck","fuckyou","fuckass",100}
				   p := person{"abc",12}
				   fmt.Println(a,"dagai---",a.book_id,p.int)
					}

				type person struct {
					   string
					   int
					}
########## struck 初始化的时候就是 a:=Books{} 要不就是{}里面为空或者0  要不就是写全部{“ff”，“dd”，“s”，2}  要不就是通过key a:Books{title:"ssss"} 获取的时候也可以通过对象.key来获取
######################################     总结一下结构体  就是  可以把结构体当成一个类  初始化的时候 a := Books{}  如果是这样就是 4个默认的{空 空 空 0}  也可以通过struct 里面的key来赋值  豁免获取的时候也可以通过对象.key来获取    ##############################

4--------------------------------------------------
#########记着  常量的定义 const a= 10  不是 const a:= 10

func main() {
	var n int = 5
	for i := 0;i<=n;i++ {
		fmt.Printf("%d+%d=%d\n",i,n-i,n)  ########格式化输出的时候 %d是int   %s是字符串  还要用到Printf 不能用Println
	}
}
----------------------------------------------------
一个包定义成这样
var Name int = 10
var age  int = 30   如果写成 Name := 10  是不行的

-------------------------------------------------------
引用一个包  如果不用的话一定要在前面加上 import( _ "main/sub" )
-----------------------------------------------
1 << 11  ###########意思就是 1 *(2**11)
---------------------------------------------------------------------
name := "11122222222333333"
        for i:=0;i<len(name);i++ {
                fmt.Printf("%d %q\n",i,name[i])    ############这样打印就不是byte格式了 或者用到 string()转一下
        }
										下面还有一种for循环更简单

	for _,v := range name {
		fmt.Println("v")
	}


--------------------------------------------------------------------
func modify(array []int) {
	array[0] = 10 // 试图修改数组的第一个元素
	fmt.Println("In modify(), array values:", array)
}
func main() {
	array := []int{1,2,3,4,5} // 定义并初始化一个数组       
	modify(array) // 传递给一个函数，并试图在函数体内修改这个数组内容    ##############传参  感觉很奇怪
	fmt.Println("In main(), array values:", array)
}
----------------------------------------------------------------
func main() {
        var start [10]int = [10]int{1,2,3,4,5,6,7,8,9}   ##########这样也行 start = 10[int]{1}
        end := start[:5]
        fmt.Println(start)
        fmt.Println(end)
}
-----------------------------------------------------------------------------

func myfunc(args ...int) {                  ################### 函数接受不定参数  类似于python的 *args    ...int  换成 ...interface{}   就是接受任意类型的参数
	for _, arg := range args {
	fmt.Println(arg)
	}
}

--------------------------------------------------------------------------------

map 创建map一般有2种方式 一个是 countryCapitalMap := map[string]int{}  但是后面一定要加{} 还有{}里面可以添加元素 但是跟下面的key value 类型一定要是相同的    第二个就用这种方式 就是一个空的{} 然后用 countryCapitalMap := make(map[string]string)

往里面添加就是  countryCapitalMap[ "France" ] = "Paris"
    		countryCapitalMap[ "Italy" ] = "罗马"
    		countryCapitalMap[ "Japan" ] = "东京"
    		countryCapitalMap[ "India " ] = "新德里"
这个就是往里面添加元素
删除元素 就是 delete(countryCapitalMap, "France")   France是key
