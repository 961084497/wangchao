python  都是只指向内存地址的值 相当于指针哦  学习Python首先我们要知道Python变量保存的是值的引用 也可以说：变量是对内存及其地址的抽象

可变数据类型于不可变数据类型 (所谓的可变不可变  其实是内存中的那个值能否改变 可变对象就是内存这块值可以改变id还不变   不可变就是内存这块值可以改变id变了)

可变数据类型：列表list和字典dict     重新赋值就是开辟新的内存空间  append += 之类的  不是重新开辟空间

不可变数据类型：整型int、浮点型float、字符串型string和元组tuple    赋值都是开辟新的空间

可变对象为引用传递，不可变对象为值传递。（函数传值）



引用传递与值传递：
可变对象为引用传递，不可变对象为值传递。（函数传值）

1，值传递： 简单来说 对于函数输入的参数对象，函数执行中首先生成对象的一个副本，并在执行过程中对副本进行操作。执行结束后对象不发生改变           #################################  【都是副本过来的】
即在堆栈中开辟了内存空间以存放由主调函数放进来的实参的值，从而成为了实参的一个副本。值传递的特点是被调函数对形式参数的任何操作都是作为局部变量进行，不会影响主调函数的实参变量的值。（被调函数新开辟内存空间存放的是实参的副本值）

值传递不会改变原来函数的值，

def Change(b):
    b += 2   传递进来的为不可变对象，为值传递  相当于相同值的一个副本
    print(id(b)) 
    print (b)
    return

a = 2
print(id(a)) 
Change(a)
print (a)
print(id(a)) 

输出为

140724617470832    a本来地址
140724617470896    值传递b的地址
4                                在函数中为4
2                                a本身还是2
140724617470832    a地址也没有改变



2，引用传递：当传递列表或者字典时，如果改变引用的值，就修改了原始的对象。（被调函数新开辟内存空间存放的是实参的地址）   ######################  【都是实参地址】

def Change(str1):
    str1[1] ="changed "   此处修改就是直接修改string的值
    return

string = ['hello world',2,3]
print (string)
Change(string)       
print (string)

10
输出为：

可以看到列表最后发生了变化

注意：

在函数调用中无法直接修改整个列表或字典的值 如果这样做，就是相当于也是相当于创建副本的值传递

这是网上很多帖子没有提到的

def Change(str1):
    str1 =[6,7]   //直接修改整个列表，也是相当于创建副本的值传递
    return

string = ['hello world',2,3]
print (string)
Change(string)       
print (string)
输出：

['hello world', 2, 3]
['hello world', 2, 3]     string没有发生变化
