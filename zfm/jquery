1 遍历
	parent() 首先他无论如何最后肯定只是一个元素 这是他和children相反 但是和find不相同的一个地方  一个人只能有一个父亲 但是可能有好多个儿子
	parents() 这个是所有祖先  parents("ul") 所有ul父元素

先给一个例子:
假设在一个表单中有一个按钮id="save"
$(document).ready(function(){
     $("#save").click(function(){
        $("#save").attr("disabled",true);//设为不可用                         
        $("#form1")[0].submit();//如果你有很多个id为form1的表单也没关系，只有第一个会提交的哈哈.
     });
});


取下拉菜单选中项的文本； 
获取和设置下拉菜单的值； 
清空下拉菜单； 
给下列菜单添加元素； 
取单选框值； 
单选或复选按钮的选择； 
取复选框值； 
判断单选或复选框是否被选中； 
元素可用不可用； 
判断元素可用不可用。 

1.取下拉菜单选中项的文本 

view plaincopy to clipboardprint? 
$("#select option[selected]").text();//select和option之间有空格，option为select的子元素   
$("#select option:selected").text();//如果写成$("#select").text();会把所有下拉菜单的文本选择出来   


2.获取和设置下拉菜单的值 

view plaincopy to clipboardprint? 
$("#select").val();//取值   
$("#select").val("value");//设置,如果select中有值为value的选项,该选项就会被选中,如果不存在,则select不做任何变动  


3.清空下拉菜单 

view plaincopy to clipboardprint? 
$("#select").empty();   
$("#select").html("");  


4.给下列菜单添加元素 

view plaincopy to clipboardprint? 
$('<option value="1">1</option>').appendTo($("#select"));   
$("#select").append('<option value="1">1</option>');  


5.取单选框值 

view plaincopy to clipboardprint? 
$("#id[checked]").val();  


6.单选或复选按钮的选择 

view plaincopy to clipboardprint? 
$("#id[value=val]").attr("checked",true);//选择   
$("#id[value=val]").attr("checked","");//取消选择   
$("#id[value=val]").attr("checked",false);//取消选择   
$("#id[value=val]").removeAttr("checked");//取消选择  


7.取复选框值 

view plaincopy to clipboardprint? 
$("input[type=checkbox][checked]").each(function(){   
alert($(this).val());   
})   
//如果用$("input[type=checkbox][checked]").val(),只会返回第一个被选中的值  


8.判断单选或复选框是否被选中 

view plaincopy to clipboardprint? 
if($("#id").attr("checked")){}//判断选中   
if($("#id").attr("checked")==true){}//判断选中   
if($("#id").attr("checked")==undefined){}//判断未选中  


9.元素可用不可用 

view plaincopy to clipboardprint? 
$("#id").attr("disabled",false);//设为可用   
$("#id").attr("disabled",true);//设为不可用  


10.判断元素可用不可用 

view plaincopy to clipboardprint? 
if($("#id").attr("disabled")){}//判断不可用   
if($("#id").attr("disabled")==undefined){}//判断可用  

-----------------------------------------------------------------  选区表格里面的onclick最好的发法-------------------------------------------
<html>
<head>
<script type="text/javascript" src="/jquery/jquery.js"></script>
<script type="text/javascript">
function nihao(that){                         //接受this 但是用that代表this  千万不能使用this
   var Text = $(that).text()
   alert(Text)
};
</script>
</head>
<body>
<p>这是一个段落。</p>
<button onclick="nihao(this)">切换1</button>    //传递一个this
<button onclick="nihao(this)">切换2</button>
<button onclick="nihao(this)">切换3</button>
<button onclick="nihao(this)">切换4</button>
<button onclick="nihao(this)">切换5</button>
<button onclick="nihao(this)">切换6</button>
</body>
</html>
-----------------------------------------------------------------------

-----------------------------------------下面也是一组对input操作----------------
获取选中的值
获取一组radio被选中项的值

var item = $(“input[@name=items]：checked”).val();
获取select被选中项的文本

var item = $("select[@name=items] option[@selected]").text();
select下拉框的第二个元素为当前选中值

$('#select_id')[0].selectedIndex = 1;
radio单选组的第二个元素为当前选中值

$('input[@name=items]').get(1).checked = true;
获取值：
文本框，文本区域：

$("#txt").attr("value")；$("#txt").val();
多选框checkbox：

$("#checkbox_id").attr("value")；
单选组radio：

$("input[@type=radio][@checked]").val();
下拉框select：

$('#sel').val();
控制表单元素：
文本框，文本区域：

$("#txt").attr("value",'');//清空内容$("#txt").attr("value",'11');//填充内容
多选框checkbox：

$("#chk1").attr("checked",'');//不打勾$("#chk2").attr("checked",true);//打勾if($("#chk1").attr('checked')==undefined) //判断是否已经打勾
单选组radio：

$("input[@type=radio]").attr("checked",'2');//设置value=2的项目为当前选中项
下拉框select：

$("#sel").attr("value",'-sel3');//设置value=-sel3的项目为当前选中项$("<optionvalue='1'>1111</option><optionvalue='2'>2222</option>").appendTo("#sel")//添加下拉框的option$("#sel").empty()；//清空下拉框
 

在Jquery中,用$("#id")来获得页面的input元素,其相当于document.getElementById("element")但是,该获取的是一个Jquery对象,而不是一个dom element对象.value是dom element对象的属性.所以,使用$("#id").value不能取到值取值的方法如下:

取值：

val = $("#id")[0].value;$("#id")[0].value = "new value";
赋值：

$("#id")[0].value = "new value";或者$("#id").val("new value");val = $("#id").attr("value");









----------------------------
function guanbi(that,name){
	//$("*").find("button").on("click",function(){
	alert(name)	
	$(that).hide()
	//})
}
</script>
</head>
<body>

<h2>这是标题</h2>
<p>这是一个段落。</p>
<p>这是另外一个段落。</p>
<button  onclick="guanbi(this,'x')">点我</button>
<button  onclick="guanbi(this,'x1')">点我1</button>
<button  onclick="guanbi(this,'x2')">点我2</button>
<button  onclick="guanbi(this,'x3')">点我3</button>

很经典的一个例子
---------------------------------------
$("p.intro")  p元素里面同级  比如 <p class="intro">ddddddd</p>
$("p .intro")  p元素里面子元素  比如 <p class="intro">ddddddd  <span class="intro"> </span></p>
$("[href]")  选取带有 href 属性的元素 可以理解为$("*[href]")
$("a[href]") 可以理解为 选取所有 target 属性值等于 "_blank" 的 <a> 元素
$(":button")	选取所有 type="button" 的 <input> 元素 和 <button> 元素   #前面直接:button可以理解为 寻找的是input/button元素中type类型
---------------------------------------
html();text();val()都是没有就是获取有就是设置 这三兄弟一直都是这样
attr("href") 一般是获取或者设置属性
css() 这个方法和attr很像css("background-color")返回class属性   $("p").css("background-color","yellow");  设置属性

------------------向上-------
parent() 直接父元素     <------>  children() 直接子元素
parents() 所有祖先元素  <------>  find("*")  所有子孙
parents("ul") ul祖先元素  <------> find("span") span子孙
$("span").parentsUntil("div")  从span一直到div祖先元素  

siblings()   所有同胞元素
next()	     方法返回被选元素的下一个同胞元素
nextAll()	所有跟随的同胞元素
nextUntil()    下面的例子返回介于 <h2> 与 <h6> 元素之间的所有同胞元素：

obj = JSON.parse(text)   后端获取的转成object
-------------------------------------console.log(JSON.stringify(xiaoming, null, '  '))---------------------

------------------------js 对象中的 this-------------------
var obj = {
    birth: 1990,
    getAge: function (year) {
        var b = this.birth; // 1990
        var fn = (y) => y - this.birth; // this.birth仍是1990(这种模式是最初的 这个是向上3位)  ##如果是 var fn = function (y){return y - this.birth};   那这里面的this就要向上一2位(从当前的function算起)  #################如果是function xxx(y)  那这里面的this就是当前这个function (this是指向的对象 函数不是对象)  这里再次强调一点，this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个 
        return fn.call({birth:2000}, year);
    }
};
obj.getAge(2015)



--------------------------------js  class-------------------------------------
class Student {
    constructor(name) {
        this.name = name;
    }

    hello() {
        alert('Hello, ' + this.name + '!');
    }
}

var xiaoming = new Student('小明');
xiaoming.hello();

-----------------------------   js  function-----------------------------------
function myFunction(arg1, arg2) {
    this.firstName = arg1;
    this.lastName  = arg2;
}
 
// This    creates a new object
var x = new myFunction("John","Doe");
x.firstName;      #####"John"



function 类名(属性1){
  this.属性1 = 属性1;
  this.方法 = function(){
   //方法中要调用自身属性，必须要使用this.属性
  }
}

function wangchao(x,y){
    this.name = x
    this.old = y
    this.nimei = function(){return this.name;}
}
nidaye = new wangchao("wangwang",29)
wangchao {name: "wangwang", old: 29, nimei: ƒ}
nidaye.nimei(4)
"wangwang"
------------------------------js  类型-------------------------------------------
typeof   2      输出   number
typeof   NaN      输出   number
typeof   null   输出   object
typeof   {}    输出   object
typeof    []    输出   object
typeof   (function(){}) 输出  function
typeof    undefined    输出  undefined
typeof   '222'         输出    string
typeof  true           输出     boolean

jQuery.type   判断类型无敌的方法

NaN出现的情况就是一个元素是undefined 在和number相加就会出现
