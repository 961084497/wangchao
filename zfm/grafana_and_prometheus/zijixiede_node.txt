其实客户端自己写也是可以的啊 比如 django flask  他就是prometheus 自己去请求客户端的接口啊  对啊  详情见 prometheus.yaml这个配置文件 只要回传数据格式

xxxxxxx 2
xxxxxxx 3
xxxxxxx 5

-------------------------------------------   下面是一个例子  ------------------------------------------------
#!/bin/python
##coding=utf-8
import requests
import prometheus_client
from prometheus_client.core import CollectorRegistry
from prometheus_client import Gauge
from flask import Response,Flask


###定义函数，返回接口响应码
def StatusCode(url):
    try:
        url = url
        response = requests.post(url)
        return response.status_code
###加了个捕获异常，是因为如果后端服务挂掉的话，会报错connect refused。如果出现666，说明后端服务挂了
    except:
    return 666
muxCode = StatusCode('自己的监控的url')
manageCode = StatusCode('自己监控的url')

###起个flask接口
app = Flask(__name__)

####定义一个仓库，存放数据
REGISTRY = CollectorRegistry(auto_describe=False)
muxStatus = Gauge("mux_api_21","Api response stats is:",registry=REGISTRY)
manageStatus = Gauge("manage_api_21","Api response stats is:",registry=REGISTRY)

####定义路由
@app.route("/metrics")
def ApiResponse():
    muxStatus.set(muxCode)
    manageStatus.set(manageCode)
    return Response(prometheus_client.generate_latest(REGISTRY),mimetype="text/plain")

if __name__ == "__main__":
    app.run(host='0.0.0.0',port=3531)

---------------------------------------------------------------------------

需要注意的是，虽然Prometheus Client Library可以定义不同的数据类型，但是Prometheus Server在获取到这些监控数据后并没有使用它们的类型（Type）信息而直接将这些数据扁平处理，并且无区别的保存到时序数据库当中。 因此这四种数据类型主要是提供一些参考，用于不同的度量数据场景
