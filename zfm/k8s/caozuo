https://www.qikqiak.com/k8s-book/docs/21.%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5.html   ##################  k8s非常好的一个文档

kubectl exec -it nginx-ingress-controller-5984d98d75-gwnlh bash -n ingress-nginx    #########  master上面 执行这个 进入nginx容器内
-----------------------------------------------------------------------------------------------------------------------------

kubectl get pod --namespace=default 等同于 kubectl get pod

[root@192 ~]# kubectl get namespaces     #########查看所有的namespaces
NAME          STATUS    AGE
default       Active    179d
gitlab        Active    88d
kube-public   Active    179d
kube-system   Active    179d
sirius        Active    78d

kubectl get pod --all-namespaces -o wide ##### 查看所有的namespaces的pod的信息

kubectl get deploy / kubectl get rc  好像是一样的  最好用deploy

kubectl scale --replicas=5 rc mysql  #####如果之前的小于5个副本  可以这样弄  这就是扩容 相反的  下面
kubectl scale --replicas=3 rc mysql  #####之前是5个 现在小于5个 就是缩容
kubectl scale --replicas=5 deploy flask-web -n webapp   #### 如果是deploy创建的 就需要这样写

https://www.jianshu.com/p/ca4de9f10daf

#忘记token怎么加入k8s集群
https://www.cnblogs.com/lehuoxiong/p/9908357.html
kubeadm token list
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed  's/^ .* //'

master节点需要pull完成的相关镜像
k8s.gcr.io/kube-proxy                            v1.13.3             98db19758ad4        2 weeks ago         80.3MB
k8s.gcr.io/kube-apiserver                        v1.13.3             fe242e556a99        2 weeks ago         181MB
k8s.gcr.io/kube-controller-manager               v1.13.3             0482f6400933        2 weeks ago         146MB
k8s.gcr.io/kube-scheduler                        v1.13.3             3a6f709e97a0        2 weeks ago         79.6MB
k8s.gcr.io/coredns                               1.2.6               f59dcacceff4        3 months ago        40MB
k8s.gcr.io/etcd                                  3.2.24              3cab8e1b9802        5 months ago        220MB
k8s.gcr.io/pause                                 3.1                 da86e6ba6ca1        14 months ago       742kB
quay.io/coreos/flannel                           v0.11.0-amd64       ff281650a721        2 weeks ago         52.6MB

node节点需要pull完成的相关镜像
k8s.gcr.io/kube-proxy               v1.13.3             98db19758ad4        2 weeks ago         80.3MB
k8s.gcr.io/pause                    3.1                 da86e6ba6ca1        14 months ago       742kB
quay.io/coreos/flannel              v0.11.0-amd64       ff281650a721        2 weeks ago         52.6MB


--------------------------  删除一个deploy ----------------------------
kubectl get deploy -n namespace-name   ######先查出来  下面再删除
kubectl delete deploy deploy-name -n namespace-name
kubectl delete -f xxxx.yml

--------------------------  查看ip的一些情况  ------------------------
kubectl get svc -n webapp -o wide
kubectl get pod -n webapp -o wide

#################  有关ip地址的配置  看下面的例子 #####################

webapp        flask-web-bb9b58789-4mtzp            1/1     Running   0          2m55s   10.244.3.15   10-6-2-114   <none>           <none>
webapp        flask-web-bb9b58789-7plp8            1/1     Running   0          2m55s   10.244.3.14   10-6-2-114   <none>           <none>
webapp        flask-web-bb9b58789-9j52d            1/1     Running   0          2m55s   10.244.2.15   10-6-2-113   <none>           <none>
webapp        flask-web-bb9b58789-jf7qn            1/1     Running   0          2m55s   10.244.1.14   10-6-2-112   <none>           <none>
webapp        flask-web-bb9b58789-k45r9            1/1     Running   0          2m55s   10.244.2.14   10-6-2-113   <none>           <none>
webapp        flask-web-bb9b58789-n5pzh            1/1     Running   0          2m55s   10.244.1.15   10-6-2-112   <none>           <none>

NAME        TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)           AGE    SELECTOR
flask-web   NodePort   10.97.103.178   <none>        11110:11112/TCP   3m8s   name=flask-web


port: 11110 //        服务访问端口 cluster-ip地址           此时可以用 curl 10.97.103.178:11110
targetPort: 11111 //  容器里面真正的端口                    此时可以用 curl 10.244.3.15/14等等:11111
nodePort: 11112 //     Node的ip地址                         此时可以用 curl 10.6.2.112:11112


--------------------------------------------  集群搭建好后可以 登录ui界面 -----------------------------------------
kubectl create serviceaccount wangchao -n kube-system
kubectl create clusterrolebinding dashboard-admin --clusterrole=admin --serviceaccount=kube-system:wangchao
kubectl get secret -n kube-system    一般是最后一个
kubectl describe secret  wangchao-token-8qcjn -n kube-system
然后就可以登录了


--------------------------------------------   k8s的更新和回滚  ---------------------------------------------------
kubectl set image deployment flask-web flask-web=10.6.2.111:5000/flask/new-flsk-web    ############   kubectl set image deployment + deploymentname 容器名字=镜像版本
[root@10-6-2-111 prd]# kubectl get deployment -n webapp
NAME         READY   UP-TO-DATE   AVAILABLE   AGE
flask-web1   3/3     3            3           17d
kubectl set image deployment flask-web1 flask-web1=10.6.2.111:5000/flask/new-flsk-web -n webapp ##########  不是default的namespace 可以这样用


kubectl rollout undo deployment flask-web              				       ############   回滚到上一版本


-----------------------------------------------------------  安装ingress  和 2个项目  ------------------------------------------------------------
1 nginx-ingress-controller 的镜像再百度云盘有   k8s的其他镜像再我的u盘中有
2 相关配置文件再这个git上面有 打包好了  
3 启动脚本就是 kubectl create -f mandatory.yaml;kubectl create -f service-nodeport.yaml;kubectl create -f ingress-flask.yaml/ingress-myapp.yaml;kubectl create -f python-web.yml/deploy-demon.yaml
4 启动后查看ingress的端口   所有的端口都是通过1583端口进去的
        [root@10-6-2-111 ingress]# kubectl get service -n ingress-nginx
	NAME            TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)                     AGE
        ingress-nginx   NodePort   10.96.182.18   <none>        80:1583/TCP,443:21617/TCP   84m
5 查看刚才2个ingress服务的域名和端口
        [root@10-6-2-111 ingress]# kubectl get ingress -n default
        NAME            HOSTS              ADDRESS   PORTS   AGE
        ingress-flask   flask.magedu.com             80      14m
        ingress-myapp   myapp.magedu.com             80      14m
6 还有外网端口ok了 内网通过cluster-ip调用
        [root@10-6-2-111 ingress]# kubectl get service
	NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE
	flask-web    ClusterIP   10.98.252.186    <none>        80/TCP    87m
	kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP   4d20h
	myapp        ClusterIP   10.110.139.173   <none>        80/TCP    82m
7 python-web.yml/deploy-demon.yaml 和 ingress-flask.yaml/ingress-myapp.yaml  这四个文件  22分组都是一个namespaces就可以了   就相当于 我的flask项目是namespaces webapp  ingress-项目.yaml也是同样的namespaces就可以了
8 项目的service中port是80就好了 tagerport和上面的容器端口一样就好了 


NAMESPACE       NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                   AGE
default         kubernetes                ClusterIP   10.96.0.1        <none>        443/TCP                   49d
default         mysql-wayne               ClusterIP   10.103.173.252   <none>        3306/TCP                  22d
default         rabbitmq-wayne            ClusterIP   10.102.98.17     <none>        5672/TCP                  22d
default         wayne-backend             NodePort    10.101.159.21    <none>        8080:12001/TCP            22d
default         wayne-frontend            NodePort    10.104.130.145   <none>        80:12000/TCP              22d
ingress-nginx   ingress-nginx             NodePort    10.106.136.93    <none>        80:80/TCP,443:14244/TCP   16d
kube-system     kube-dns                  ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP    49d
kube-system     kubernetes-dashboard      NodePort    10.106.2.245     <none>        8443:8443/TCP             48d
kube-system     node-exporter             NodePort    10.99.135.0      <none>        9100:21672/TCP            44d
kube-system     prometheus                NodePort    10.103.247.168   <none>        9090:20003/TCP            44d
wangchaoapp     wangchao-test-webappapp   ClusterIP   10.105.174.167   <none>        11/TCP                    15d     ingress 要用clusterip 
webapp          flask-web                 ClusterIP   10.105.111.64    <none>        800/TCP                   15d



NAMESPACE       NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                     AGE
default         flask-web                 ClusterIP   10.98.252.186    <none>        80/TCP                      23d
default         kubernetes                ClusterIP   10.96.0.1        <none>        443/TCP                     28d
default         myapp                     ClusterIP   10.110.139.173   <none>        80/TCP                      23d
default         mysql-wayne               ClusterIP   10.103.173.252   <none>        3306/TCP                    28h
default         rabbitmq-wayne            ClusterIP   10.102.98.17     <none>        5672/TCP                    28h
default         wayne-backend             NodePort    10.101.159.21    <none>        8080:12001/TCP              27h
default         wayne-frontend            NodePort    10.104.130.145   <none>        80:12000/TCP                27h
ingress-nginx   ingress-nginx             NodePort    10.96.182.18     <none>        80:1583/TCP,443:21617/TCP   23d
kube-system     kube-dns                  ClusterIP   10.96.0.10       <none>        53/UDP,53/TCP,9153/TCP      28d
kube-system     kubernetes-dashboard      NodePort    10.106.2.245     <none>        8443:8443/TCP               26d
kube-system     node-exporter             NodePort    10.99.135.0      <none>        9100:21672/TCP              22d
kube-system     prometheus                NodePort    10.103.247.168   <none>        9090:20003/TCP              22d     ------->     clusterport:nodeport    [targerport 是不会出现在这上面的]
wangchaoapp     wangchao-test-webappapp   NodePort    10.104.48.96     <none>        80:7148/TCP                 84m
webapp          flask-web1                ClusterIP   10.104.91.129    <none>        80/TCP                      23d     ------->     clusterport  


特别注意的是 mandatory.yaml 和 service-nodeport.yaml 起来后就不需要更改了   以后增加的是类似于 python-web.yaml 和 ingress-flask.yaml   还有后面2个一定要是在一个namespaces 不在同一个是不行的 比如都在同一个 namespaces:flask-web 下面
java 应用级别 service类型最好用clusterip模式 
有个成功的目录文件 newingress

------------------------------------------------  普罗米修斯监控  ------------------------------------------
镜像百度云盘有
kubectl create -f node-exporter.yaml
kubectl create -f rbac-setup.yaml
kubectl create -f configmap.yaml
kubectl create -f promethues.yaml
