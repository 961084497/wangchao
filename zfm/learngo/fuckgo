package main

import(
	"fmt"
)

// 首先 go的类型自带的有多个  array   slice  map struct interface 等等

//--------------------------------------------------------------------------------------------------------
//  1  首先 array   [10]int         就是array类型  赋值的时候一定需要{}  定义的时候不需要   yes                                  可以 a := [3]int{}     可以var a [4]int   ----------->第一个是[0 0 0]  第二个为[0 0 0 0]

/*func main() {
//	a := [10]int{}
	
	var a [10]int                        //  array   是可以定义空数组的
//	a = [10]int{}
	fmt.Printf("%T\n",a)
	fmt.Println(a)	
}*/

//--------------------------------------------------------------------------------------------------------
//  2  首先 slice   []int           就是slice类型  赋值的时候一定需要{}  定义的时候不需要     yes                                 可以 a := xxx{}      可以 a := make([]int,3) ---------->   第一个是[]    第二个是[0 0 0]

/*func main() {
//	a := []string{}
//	var a []int
//	a = []int{}
	fmt.Printf("%T\n",a)
        fmt.Println(a)
}*/

//---------------------------------------------------------------------------------------------------------
//  3  在个就说到  map[int]string   就是map类型    赋值的时候一定需要{} 除了make() 里面是不需要的  他会默认为空   定义的时候不需要   yes

/*func main() {                                                                                                                    a :=map[int]int{}  或者 make(map[int]int)       -------->都是空的map[]
//	a := map[string]string{}   【1】
//	a := make(map[string]string)    //这种是不需要赋值的  【2】
//	var a map[string]string			// map可以这么定义类型 但是啥都干不了 所以一般都会用【1】/【2】
	a["name"] = "wangchao"
	a["old"]  = "30"
	fmt.Println(a)
}*/

//---------------------------------------------------------------------------------------------------------
//  4  然后在个就说到  struct  这个是一个type  不是内置的   定义的时候不需要                                                        可以 a := xxxx{}  可以 var a xxxx也是可以的 都是可以获取到值得   

type wangchao struct {
	name string
	age  int
}

type chaowang struct {
	wang  wangchao 
	class string
}

func main() { 
//	a := wangchao{}  //重点说明 struct
	var a wangchao
	fmt.Println(a)
	var b chaowang
	b = chaowang{wang:wangchao{name:"nimei",age:30},class:"三年二班"}
	fmt.Println(b)
}
-------------------------------------------------------------------------------------------
func main() {              ############### go  匿名函数应用

        f := func(a, b int) bool {
            return a > b
        }

        ff := func(a, b int) bool {
            return a > b
        }(3, 4)

        fmt.Println(f,ff)
}
----------------------------------------------------------------------------------------------------------------

func main() {
        var myname string = "taozs" //其实就是字符串类型

        l := []byte(myname)       //字符串转字节数组    字符串只能转字节数组     一般就用这个  如果用myname[0] / myname[1]  只要是一个都是byte类型 多个的话去除的就是字符串

        fmt.Println(l)       //字节长度
        fmt.Println(string(l[0]))       //字节长度        但是byte可以直接转字符串
}
----------------------------------------------------------------------------------------
var p2 person = p.(person) //类型断言，接口类型断言到具体类型       person 是一个 struct   上面已经定义了 var p Personer //Personer 是一个interface {}类型 所以p是interface{}类型

fmt.Println(p2.age)

--------------------------------------------------------------------------------------------------
type handler func(name string) int    #################  定义type为一个func 

func (h handler) add(name string) int {

return h(name) + 10

}
-------------------------------------------------------------------------------------------------

###################################################  interface{}  合集  #############################################################
					第一种interface{}
type Person  interface{
	Run()                     ----------------- Run() 为一个struct实现的方法
	Name() string             ----------------- Name() 为一个struct实现的方法
}

type person struct {
	name string
	age  int
}

func (person) Run() {
	fmt.Println("running...")
}

func (p person) Name() string {
	return p.name
}

           ============================================================================================================
					第二种interface{}
type adder interface {
	add(string) int
}

type handler func(name string) int   -------------- 对比就是上面的struct换成func了

func (h handler) add(name string) int {
	return h(name) + 10
}

//函数参数类型接受实现了adder接口的对象（函数或结构体）

func process(a adder) {
	fmt.Println("process:", a.add("taozs"))
}
----------------------------------------------------------------------------------------------------------------------------
按照Go语言规范，任何类型在未初始化时都对应一个零值：布尔类型是false，整型是0，字符串是""，而指针、函数、interface、slice、channel和map的零值都是nil。
而数组的默认值要根据其数据类型来确定。例如：var a [4]int，其默认值为[0 0 0 0]
而struct 其实就是各种类型的集合 所以默认值就是上面个个类型咯
------------------------------------------------------------------------------------------------------------------------------------------------------
引用方式  slice map chan 指针 interface
其他全是值传递

---------------------------------------------------------------------
new出来的都是指针
-----------------------------------------------------------
make 只能用于 slice，map，channel 三种类型
----------------------------------------------------------
https://www.jb51.net/article/120210.htm   ############# go非常好的一篇文章

-----------------------------------------------------------------------------
func f(p I) {
	switch t := p.(type) {   //  对p接受的判断类型
	case *S: 
	case *R: 
	case S:
	case R:
	default:
	}
}
