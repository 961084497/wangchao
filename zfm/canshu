#!/usr/bin/python

def wangchao(aaa,*a,**aa):
	print(aaa)
	print(a)
	print(aa)

1
#wangchao(1,2,3)            1 (2,3) {}

2
#b = (1,2,3)
#wangchao(b)       (1,2,3) () {}


3
#a = (1,2,3)
#wangchao(*a)       1 (2,3) {}
#b = (1,2,3)
#wangchao(*b)       1 (2,3) {}

1和3的结果是一样的



还有一种情况 a = {"port":6666,"host":"192.168.1.1"}


def ww(port=6388,host="localhost")

如果是 ww(a) 则 a被当作是一个参数传进去了 传给了port


如果是 ww(*a)  则应为a是字典型 所以 *a对参数a没有任何意义  相当于传进去("port","host")

如果是 ww(**a) 则这样是有意义的  其实传进去是这种形式的 ww(port=6666,host="192.168.1.1")

def wangchao(name,a="wang",*args,**knows):print(name);print(a);print(args);print(knows)
>>> bb = dict(a1=1,a2=2,a3=3)
>>> bb
{'a1': 1, 'a3': 3, 'a2': 2}
>>> wangchao(**bb)  ######################如果用这种方式他找的全是函数里面**knows这个   如果是wangchao(bb) 则他会把字典传给name   所以  为了对应第一种 必须要传给name
Traceback (most recent call last):
  File "<input>", line 1, in <module>
    wangchao(**bb)
TypeError: wangchao() takes at least 1 non-keyword argument (0 given)
>>> wangchao(1,**bb)  ###############这样就对了
1
wang
()
{'a1': 1, 'a3': 3, 'a2': 2}




ps   #########################   **knowd  里面真要传值  只能是 a = 3  wangchao(a="wangchao")

def wangchao(name,a="wang",b = "chao",*args,**knows):print(name);print(a);print(b);print(args);print(knows)

bbb = {"a": "b11","b": "c11", "d11": "d1"}
wangchao(1,**bbb)    ###########传入字典**bbb全部赋值给**knows  但是有一点 如果用wangchao(1,a="ccc",**bbb) 就会报错 应为已经定义了a="ccc" 后面又是定义 a="b11" 所以会冲突

-----------------------------------------------------------------
def test_args_kwargs(arg1, arg2, arg3):
    print("arg1:", arg1)
    print("arg2:", arg2)
    print("arg3:", arg3)

>>> kwargs = {"arg3": 3, "arg2": "two", "arg1": 5}
>>> test_args_kwargs(**kwargs)
arg1: 5
arg2: two
arg3: 3
-----------------------------------------------------------------
#!/usr/bin/python
def func_a(arg_a, func, **kwargs):
    print(arg_a)
    print(kwargs)
    print(func(**kwargs))

def func_b(**arg_a):
    print(arg_a)

if __name__ == '__main__':
    func_a(arg_a='Hello Python', func=func_b,a='aa',s="ss")
