#!/usr/bin/python
def log1(a):
	def log(func):
    		def wrapper(*args, **kw):
			print(a)
        		print('call %s():' % func.__name__)
        		return func(*args, **kw)
    		return wrapper
	return log

@log1("wangchao")   #### (1) now = log1("wangchao")    (2) now = log1("wangchao")(now)   其实这个时候log1("wangchao")就是上面的第一个返回值相当于wrapper
def now(a,b):
	print a+b
	print('2015-3-25')

now(3,4)


#  now = log1("wangchao")(now)


def log(func):
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper

@log   #########  now = log(now)    这一步要这样想  啥都没有反应  只返回一个 wrapper函数   当执行下面 now()的时候才执行 wrapper()
def now(): 
    print('2015-3-25')


now():
2015-3-25


-------------------------------------------------------------------------------------------------------

#!/usr/bin/python

def f1(fun):
	print("f1-----")
	def f11():
		print("f1")
		return fun()
	return f11


def f2(fun):
	print("f2-----")
	def f22():
		print("f2")
		return fun()
	return f22


@f1
@f2
def dd():
	print("dd")


dd()

结果为
f2-----
f1-----
f1
f2
dd

##################相当于  dd = f1(f2(dd));dd()    会先打印f2  在打印f1 最后执行dd   其实可以这样想 不管怎样最后传到f1里面都是一个函数名字而已---



######## 限制类的fun使用
@abstractmethod 如果在class里面使用了这个 则这个class不能被实例化   而且他的子类如果继承他 必须要重写父类函数里面加了@abstractmethod的函数

#################################下面是python2的用法  python3的写法不一样 用法是一样的
class wangchao(object):
    __metaclass__ = ABCMeta
    @abstractmethod
    def ww(self):
        print("ww")



class chaowang(wangchao):
    def www(self):
        print("www")


    def __call__(self):
        print("this is a lei")

    def __str__(self):
        print("this is a str")
        return "ssss"

bb = chaowang()
print(bb())


---------------------------------
functools.wraps  print(a_function_requiring_decoration.__name__)的时候就会打印自己的 不会打印别人替换的了
