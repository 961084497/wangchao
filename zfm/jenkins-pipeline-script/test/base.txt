if (ACTIONS == "ddddd"){
       stage("开始了"){
        sh "echo \"##############编译开始############\""
        sh "echo $ACTIONS"
        println ACTIONS  ###直接获取前端页面的值  但是全部要大些   或者写成 "${env.actions} 但是这里的actions要个你这前端页面那个传来
        println a_name
        println "env.gitRepo:${GITREPO}"  #########  前端页面传来的  直接用全部大写  或者用env.小写 都是可以的
        println "env.gittag:${GITTAG}" 
        println "env.packageName:${PACKAGENAME}"
        println "env.rollback:${ROLLBACK}"
        println "env.actions:${ACTIONS}"
        println "env.workspace:${env.WORKSPACE}"  ########## jenkins 构建目录  相当于wangchao-test就是git clone的地址   /opt/jenkins_slave_01/workspace/TEST/edu/wangchao-test
        println "env.projectpath:${env.PROJECTPATH}"   ##########TEST/edu/wangchao-test   jenkins上面的相对项目地址
        }
      }


入口那一层
其实下面也是可以的


if (env.node == "huawei") {
	node() {
		}
}
else {
	node() {
		}
}



####### 还有jenkins 中 添加是谁构建的坐标  但是提前那个user build 插件要安装好

node('jenkins_slave_01') {
        wrap([$class: 'BuildUser']) {
            def user_user = env.BUILD_USER_ID
                println user_user
                        currentBuild.description = "Choice action is ####${user_user}###"
        }

build job:"HW-UAT/edu/saas-job/saas-job.war"  ##############  在stage里面添加这样 还可以继续编译下一个job
mail to: team@example.com, subject: 'The Pipeline failed :    #########  发邮件 

----------------------------------------------------------   用 ‘’’ xxxx '''  可以就想写脚本一样运行  ---------------------------------------------------------
stage('build jar') { 
        sh '''
	source /etc/profile
        a=(exchange-cache exchange-common exchange-dao stats-dao operate-service)
         for i in ${a[@]}
            do
                echo "-----------------开始构建$i---------------------"
                cd /jenkins/code/game/xhv2-$i
                if [ `git branch|grep "* master"|wc -l` -ne 1 ]
                    then
                        git checkout master
                fi
                git pull
               /usr/local/maven-3.5.4/bin/mvn clean install -Dmaven.test.skip=true
                
        done
        
        '''
------------------------------------------------------------------------------------------------------------------------

archive 'target/*.jar'   ##########  pipeline语法 定义包的下载路劲  可以在web ui  直接下载这个包

------------------------------------------------------------------------------------------------------------------------
input message: 'please input you message', ok:'yes go on',parameters: [string(defaultValue: 'wc', description: 'this a select name', name: 'name', trim: false)]     #### input标签
input message: 'User input required', ok: 'Release!',parameters: [choice(name: 'RELEASE_SCOPE', choices: 'patch\nminor\nmajor', description: 'What is the release scope?')]   #### select标签


-------------------------------------  在groovy中如果想写成shell脚本时的模式  可以用 完全支持的 -----------------------------------
        sh '''
                echo "`date +'%M'`"
                cd /tmpt/tmp || echo "没有那么目录"
                pwd && echo "此时目录"
                echo 'fuck you haha'

           '''
---------------------------------------------------------------------------------------------------------------------

如果要优雅的退出pipeline   可以用

error "Program failed, please read logs..."      ########这样就退出了

-----------------------------------------------------------------------------------------------------------------------
node('jenkins_slave_01') {
        stage("验证用户") {
        def PASSWORD = input(message: '请输入admin用户的发布密码', ok:'yes go',parameters: [string(defaultValue: '', description: '二层验证 请输入发布密码', name: 'password', trim: false)])
        def suibian = gitp()
        if (PASSWORD == suibian) {
                println "ok ---------------------------------------------------- go on ----------------------------------------------------------------------"
        } else {
                println "------------------------------------------------------- password is error -----------------------------------------------------------'"
                error "bye bye"
        }
        }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git parameter  这个插件也很好用   就是可以选择  是选择分支还是Git tag   还是全部都选择


--------------------------------------------------------------------------------------------------------------------------------

stage("拉取代码") {                                  #################   for循环 并发执行  ###############
        sh "echo start pull code"
        def tasks = [:]
                for (int i = 0; i < 5; i++) {
                        tasks["Task ${i}"] = {
                        stage("Task ${i}") {
                                echo "hello world"
                                sh "sleep 5"
                        }
                        }
                        }
                parallel(tasks)
        //println "您选择的不是华为"
        }




def tasks = [:]

for (int i = 0; i < 5; i++) {
  def index = i+1                       ################# 上面没有解决闭包问题 这一行加上 这种解决闭包的问题  ######################
  tasks["Task ${index}"] = {
    stage("Task ${index}") { 
      echo "Task ${index}"
    }
  }
}

--------------------------------------------------------------------------------------------------------------------------------------------

 cmdSshConnect = "sshpass -p 'Ssic@2018' ssh 172.20.61.173"                             ##############################   有awk的 要这么写才能可以
        cmdFindPs = 'docker ps| grep provider.war| awk \'{print $1}\''
        cmdFillFindPs = cmdSshConnect + ' ' + cmdFindPs

        //echo 'Command find = ' + cmdFillFindPs
        runPs = sh(returnStdout: true, script: cmdFillFindPs)
        println runPs

 )))))))2  或者用下面的
	 sh "sshpass -p 'Ssic@2018'  ssh 172.20.61.173  \"docker ps | grep provider.war|awk '{print \\\$1}'\""


-----------------------------------------------------------
list = "sh /var/jenkins_home/git_data/test_project.sh".execute().text.readLines()
//return [list]
list.each{
  println it
}
