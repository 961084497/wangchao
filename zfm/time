lei time zhuangshiqi canshu log nginx mangguo shellshuzu popen module message sorted blueprint __xx__ shuchu ping curl fanshe excle yaml sh beautifulsoup meili requirements.txt code set panduan zhengze elk rabbitmq wangchaocmd.py wenjianserver.py wenjianclient.py collections els git dns manguotest wangchaoimage.py gitlab ansiblewangchao quanxian youjiantupian yingpan mysqldb duoxiancheng docker service sedN

time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(time.time()))  时间戳转 00-00-00 00:00:00
time.mktime(time.strptime("2018-09-09 00:00:00", "%Y-%m-%d %H:%M:%S"))  转成时间戳

time_tuple = (2017, 6, 23, 18, 17, 27, 2, 317, 0)
time.mktime(time_tuple)


date -s "2017-04-08 `date +%T`"

with open('filename', 'wt') as f:  
    f.write('hello, world!')

w类同于 重定向 >
a类同于 重定向 >>  但是a的时候默认是不换行的 自己可以添加\nhello.world


class MyEx(Exception):  
    pass
a = "bbb"
if len(a) <= 6:
#b = a[6]
	raise MyEx("输入的值小于6")
else:
	print("您输入的是对的")


/usr/local/redis-6397/src/redis-cli -p 6397  -a 'honglu!@#123'>/tmp/redis.txt<<EOF
	del wangchao        #######这里面是支持变量的
	keys *
EOF


payload = {xxx:xxx,xxx:xxx}
r = requests.get('http://httpbin.org/get', params=payload)
r = requests.post('http://httpbin.org/get', data=payload)

ping -c 2 -w 5 192.168.1.1 #############ping 一个ip 2次 在5秒内完成

grep -P 匹配扩展   grep -P '(^ +upstr|^ +server)'| grep -v off
grep -o  精确匹配
sed -r 支持正则扩展
sed  -n 's/.*-\(c.*\)$/\1/p'
sed -n '/href/,/href/p' php.log   ##########打印区间的内容
sed -n '/^\s*rrr\|^\s*eeee/p' 1  ###########匹配| 或的时候要要写上\|
sed -n l file  #####查看文件  后面可以 sed  's/\o240\|\o302//g' file

select * from cu_customer where create_time>date_sub(curdate(),interval 1 day);
DATE(a.`create_time`) >= date_sub(CURRENT_DATE,INTERVAL  3 day)   ##############三天前的

cd /home/wls81/tomcat && for i in `ls | egrep -v '(dubbo|jenkins)'`;do echo `ps aux| grep $i/conf/logging.properties|grep -v 'grep'`| awk  '{if (length($0)==0){printf"%s没有起来",i;print ""} else if ($1=="wls81") {printf"进程号为  %s,项目为   %s",$2,$12;print ""} else if ($1=="root") {printf"%s进程使用root启动的    进程号为    %s",i,$2;print ""} else {print "111"}}' i=$i;done || echo "第一步错误"
cat /etc/passwd | awk -F ":" -v a="test" '{if ($1==a) {print $0}}'  或者 cat /etc/passwd | awk -F ":" '{if ($1==a) {print $0}}' a="test"  都是可以的

df -h | grep vda1 |awk '{split($5,a,"%"); if (a[1]>=90) {printf"\033[1;31m磁盘使用率过大 现在为%s%  请联系龚军清理\033[0m",a[1];print ""}}''"]]"}}'  ##########   awk打印颜色

{printf"\033[1;31m%s    没有起来xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\033[0m",a;print ''}}   #########   awk 打印颜色

awk 'BEGIN{sum=0}{sum+=$1}END{print sum}' 1  ########   像这种的我们可以怎样想  可以想象成一个脚本

|--------------------
|sum=0
|
for xxx;do
|let   sum+=$sum
|done
|
|print($sum)
|
|
|--------------------

df -h  | grep /xv |awk '{split($5,a,"%");print 'a[1]'}'  #######   awk切割

substr($0,1,2) ####截取字符串前2个  

awk '{gsub("gg","GG",$0);print $0}' 1    ####替换打印  但不是真实的替换

awk '{if ($1 ~/111/ && $2 ~/111/)}'     

echo "123"|awk '{system("echo "$0)}'   #######调用系统命令
NR 是行数 1 2 3 4 5 6  NF 是几个域 默认以空格分隔

import sys
reload(sys)
sys.setdefaultencoding("utf8")

sys.path[0]  #####这个是执行的脚本所在的位置  不是在哪个位置执行脚本的  类似于 dirname $0

--set-gtid-purged=OFF
create table t3(select * from t1)   t3表没有
rename table t1 to t2   改变表名字


userid   username   usepassword
1          张三       1234
2          李四       2345


RoleID           RoleName          RoleNote
01                  系统管理员      /test1.html
02                  监控人员        /test2.html
03                  调度人员        /test3.html
04                  一般工作人员    /test4.html
05                  调度人员        /test4.html


UserRoleID           userid           RoleID  
1                     1                 02        
2                     2                 02
3                     1                 03


a = 'sdasdsadsa www.baidu.com  sadsad'
b = re.compile(r'.+?(www.+?)\s.+?')  #####()里面是匹配出来的内容 ?是非贪婪模式

iptables -t nat -A OUTPUT -p tcp --dport 6397 -j DNAT --to-destination 127.0.0.1:6379

configobj

float("%.2f" %(8/float(3)))  保留2位小数(这个在python2.6就不好用了) 但是python 2.6中可以这样  只不过是str类型 "%.2f" %(8/float(3))  from decimal import getcontext,Decimal;getcontext().prec = 7;a = "7";b = "3";print(Decimal(a) / Decimal(b))

b = lambda x,y:1 if x>y else -1  如果x>y返回b = 1 x<y返回b = -1    ####### [ii for i in a for ii in i]  ########还有   [i for i in a if i > 4] ## a = [] or "" or 5 最后a = 5

for k,v in itertools.groupby(a)  &&  for k,v in itertools.groupby(a,lambda x:upper(x))    ;print(k,list(v))   #######
for k,v in enumerate("dasdhshflsdhfiuhhfisdhfio"):print(k,v)  #####这个是列出当前索引位置和数据

from configobj import ConfigObj   #############读写配置文件方便

for k,v in ([1,2],[3,4],[5,6]):

import glob
files = glob.glob('*.py')

isinstance(a, list) 判断类型

------------------------------------
>>> a = "[1,2,3,4]";eval(a)
[1, 2, 3, 4]

a = "print(\"ok\")"
exec(a)
-----------------------------

split -b 5M calfTrader_kline_jns_1.log.2017-08-29 -d -a 3 wangchao.log ###吧calfTrader_kline_jns_1.log.2017-08-29日志切割成每个5M大小的文件 以wangchao.log后面加3位数的文件

pip install -t /usr/local/lib/python2.7/site-packages/ yagmail  ####这个是pip下载的是python2.7的库  放在/usr/local/lib/python2.7/site-packages/下面

pip install -U pip pip自更新

WeRobot ################### python微信接口

a = [1,2,3,4]
b = a[:] ############列表复制  但是不随原来的变化而变化

from collections import Counter  ########统计个数挺好用的  这个只有在2.7以上才能用

http高于tcp  一次http请求  先建立tcp  然后再tcp的基础上创建http传输

a = [[1,2,3],[1,2,3],[1,2,3]]  ### sum(a,[])
a = {"aa":1,"bb":1};b = {"aa1":1,"bb1":1}; a.update(b) 得出的结果是a的  结果为 {"aa":1,"bb":1,"aa1":1,"bb1":1}

a = [{1:2},{1:2},{3:4},{3:4}]   #################### 去重    [{iii[0]:iii[1]} for iii in list(set([ii for i in a for ii in i.items()]))]  
a = [[1,2],[1,2],[3,4],[3,4],[4,3]]   ###############list(set([tuple(ii) for ii in [sorted(i,key=int) for i in a]]))  列表里面如果有列表那不能直接用set 可以先把列表里面的列表转成元祖再用set
a = ["","123"," ",[1,2,3]];    filter(lambda x:x and x.strip() if not isinstance(x,list) else x,a)

a = {} or 1 or []  ##############为a赋值  最终a=1  剩下的都是false


yum -y install cyrus-sasl-md5 && yum  -y install cyrus-sasl-plain ########## svn  出现问题可以这样

每五分钟执行  */5 * * * *  -------  每小时执行 0 * * * * --------  每天执行   0 0 * * * -------  每周执行  0 0 * * 0  --------  每月执行 0 0 1 * * ------- 每年执行  0 0 1 1 *

rsync -av --delete -e 'ssh -p 22' ./ root@web01:/tmp/honglu  ##########你要同步的东西都在./下面 ./*这种写法是错误的   如果不要全部可以./7 8这样同步过去 对方多余的会删除

rsync -av --delete -e 'ssh -p 22' root@web01:/tmp/honglu/ ./  #######吧对方的/tmp/honglu/下面所有的复制过来  如果我这边有多余的  则直接删除   这个 /tmp/honglu/ 如果是/tmp/honglu  则把honglu这个目录复制过来了

1. import  commons  2. __import__('commons')  果是多层导入: 1 from list.text import commons ;__import__(' list.text.commons',fromlist=True) #如果不加上fromlist=True,只会导入list目录

ssh-keygen;ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.16.0.194  ###本地的pub导入到authorized_keys  公钥私钥和用户没关系只要放到那个用户家目录传过去公钥就可以通

ssh -n ls  ######################以后尽量用这个参数-n

yum install python-devel libffi-devel openssl-devel;pip install pyopenssl ndg-httpsclient pyasn1      ######## requests 到https网站问题

pip freeze > requirements.txt;pip install -r requirements.txt

yum -y install pwgen ;   pwgen 15 1 (生成一个15密码的命令) 这个蛮好用的

a = [[1,3,5],[2,4,6]]; zip(a[0],a[1]);[(1, 2), (3, 4), (5, 6)]  ########zip有个经典的用法  就是前面的a  可以写成 *a 比如 zip(*a)

from collections import Counter;Counter("dkashdkshkjfhsdkjhfksd");Counter({'k': 5, 'd': 4, 'h': 4, 's': 4, 'f': 2, 'j': 2, 'a': 1}) ######好用的计数

from collections import OrderedDict; d1 = OrderedDict();然后可以这样加  不能直接update一个字典  要不然又是无序的 
aa = [("a",1),("b",2),("c",3),("d",4)]
>>> d1 = collections.OrderedDict()
>>> for k,v in aa:
...     d1[k]= v

然后 json.dumps(d1);对方解析就要 json.loads(bbb,object_pairs_hook=OrderedDict) 只支持2.7

这样得出的字典结果就是有序的

frozenset(range(4))  #################这个是批量生成set 集合

ls | grep -P --color .*.sh\|py$   ####其实正常的应该是py|sh  但是  shell中不是有个|管道符么  所以  要转义啊 哥

result = subprocess.Popen("awk '/KILL QUERY/ {print $2}' /tmp/rm-uf674qnrl41677g0s.log",shell=True, stdout=subprocess.PIPE)
s = result.stdout.readlines()

mysql -umysqlroot -psch6IisicsZsYx9k < 1.sql >wang  ######################通过1.sql的sql语句  导入到wang这个文件

rabbitmq  如果开启消息持久化 如果消费者没有发送ack  那么可能出现一直持久化 就会出现内存溢出

sed awk grep 匹配或者大匹配
|------------
|grep -P '^rrr|^\s+rrr' 1   #####  注意 这边是| + 应为是扩展正则
|sed -n '/^rrr\|\s\+rr/p' 1  #####  注意 这边没有写成 -r  所以  要用 \| \+
|awk '{if ($0 ~/^rrr|^[[:space:]]+rr/) {print $0}}' 1  #### awk 支持扩展正则  但是空格只能是[[:space:]]
|-------------

iptables -D f2b-nginx-limit-req -s 139.224.23.111 -j REJECT  ############  临时删除ip 被fail2ban挡住的ip

dd if=/dev/zero of=/root/test.iso bs=1024M count=1 conv=fdatasync  ###################测试写入的速度
dd if=/root/test.iso of=/dev/zero bs=1024M count=1 iflag=direct  ##########测试读入的速度                 检测用的是 iostat -d -k 1

Pillow  ######### python 图片处理库  可以用作验证码

1.PREROUTING (路由前)
2.INPUT (数据包流入口)
3.FORWARD (转发管卡)
4.OUTPUT(数据包出口)
5.POSTROUTING（路由后）

端口映射 rinetd

netstat -tunp  本地的ip就是叼  我提供的端口别人来调的 别人提供的端口 我来调

nc -v -w 10 -z localhost 7070 && echo $?    ############ nc扫描端口 -w <超时秒数>   设置等待连线的时间  成功返回0  不成功没任何输出

redis-cli -a "REDISredis888666" -h r-uf6c5bbb82356e64.redis.rds.aliyuncs.com keys "activity:user_fairware_receive*" |xargs redis-cli -a "REDISredis888666" -h r-uf6c5bbb82356e64.redis.rds.aliyuncs.com del ######批量清除正则匹配到的key

ansible ppb-web02,ppb-web03 -m shell -a "a=\$(ps aux| grep /pairCenter/| grep -v grep| awk '{print \$2}');sudo -u wls81 jstack  \$a| grep -i stat"

svn 管理工具 if.svnadmin

sorted(aa,key=lambda x:x[0],reverse=False)   ###################按照首字母排序 不倒序

re.compile(r'\w+').findall(a)   #####得出的是一个列表

flask redirect(url_for('hello_world')) redirect() 都是可以的  但是 第一个方便点  应为你如果删除了html 就会报错了 而且整体的逻辑不一样

python 美化表格库 from prettytable import PrettyTable

{printf 'PID\tUSER\tAPPNAME\n';printf '%s\t%s\t%s\n' "1" "john" "foo bar";printf '%s\t%s\t%s\n' "12345678" "someone_with_a_long_name" "blub blib blab bam boom";} | prettytable.sh 3 ######美化输出挺好的 首先先要source ./prettytable.sh一下 接下来就可以用了
{ echo "www\t ccc\t fff\t hhh"; echo "www\t ccc\t fff\t hhh";  }|prettytable 4 green  ######这样也是可以的
cat /etc/passwd| awk -F : 'BEGIN {print"AAA\tBBB\tCCC\tDDD"}''{printf"%s\t%s\t%s\t%s\n",$1,$2,$3,$4}'|prettytable 4; ######## 这样也是可以的

openpyxl  ############# python一个更简单的操作excle的库

a = "wangchao";b="zhangshenyun";print("{0} ai {1}".format(a,b))    ########### format格式化输出

python manage.py makemigrations cmdb; python manage.py migrate

print(json.dumps(json.loads(r.text),indent=4)) 得到的数据美化json数据  其实就是先loads  在dumps 一定要知道

rpm --replacepkgs ###rpm重新安装


----------------------------------------------------------------------------------------------------
因为python是弱类型语言，赋值语句和其定义变量的语句一样，所以a=[4,5,6]'这句中，它是“有歧义的“，因为它既可以是表示

引用全局变量a，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global，

global定义的本地变量会变成其对应全局变量的一个别名，即是同一个变量。

什么样的情况下，list和dict不用global呢？当在函数内是用list或dict的内置函数进行修改时，如append、remove等方法，

而非‘=’赋值时，可以不用global声明
class wangchao(object):
    a = {"ss":2, "dd":3}

a1 = wangchao()
print(a1.a)
a2 = wangchao()
print(a2.a)
print(wangchao.a)
wangchao.a["ss"] = 22    ##################这样改的话是全局
print(a1.a,a2.a)
a1.a = {"a1a":12}    #################这样定义的话是局部    a1.a["ss"] = 22  ##############这样改的话也就是全局了  他隐性用了global参数
print("-"*100)
print(a1.a,a2.a)
------------------------------------------------------------------------------------------------------

https://www.cnblogs.com/yingchen/p/6763524.html  ######redis-clustem集群  前端可以放一个中间件 twemproxy  反向代理

sys.exit(8)  ####python 程序退出 返回8

---------------------------  python 按照多个字符切割 -----------------
>>> a
'my[name is wang:chao]shide'
>>> re.split('[\[\s\]]',a)
['my', 'name', 'is', 'wang:chao', 'shide']
>>>
----------------------------------

Linux建立软连接 ln -s /data/auto(目录) /root/backauto    #####注意/data/auto 一定要是全路径 否则就是错误的   删除的时候要rm -rf /root/backauto 不能是/root/backauto/否则全删除了

echo "this is my test mail" | mail -s 'mail test' xxx@yyy.com  ##################### Linux发邮件

ls |xargs -i cp -rf {} ../chaowang    #####################xargs 的用法 一定要加上-i {}的意思就是把前面找处的值复制给{}
ls {1..5}.ini| sed 's/.ini//g'|xargs -i mv {}.ini {}.so  #########################新型写法  也不错


for i in `ls *.apk`;do newname=`echo $i|sed 's/wang/dd/g'`;mv $i $newname;done #################################批量修改文件名

shell中 for i in `cat 3` 这样是默认对空格做切割字符串的   cat 3|while read line;这个是对一行一行分析

-------------------------------------------------
xx.replace("s","m")全部替换s-->m		-						-
xx.replace("s","m",3)替换前3个a-->m 后面的不处理						-
xx.find("m")###可以用 找到就是索引位置 没找到就是-1  此外a.find要好于a.index 应为a.index找不到会报错 a.find不会报错					-
-------------------------------------------------
awk '{max=0;for (i=1;i<=NF;i++){if ($i>=max) {max=$i} };print max}' gg.txt  #########################每行最大的值
awk '{min=9999999999;for (i=1;i<=NF;i++){if ($i<=min) {min=$i} };print min}' gg.txt  ##########每行最小的值
awk '{max=0;for (i=1;i<=NF;i++){{max+=$i} };print max/(i-1)}' gg.txt   #########每行的平均数

ps aux| grep java| grep /usr/local/tomcat/| awk '{print $2}'|xargs kill -9 && echo "杀进程成功" || { echo "杀进程失败----退出";exit 1; } 通过ps来弄然后awk打印关闭进程
ps aux| grep nginx| grep -v grep && echo "ok" || echo "no"   ###############ps  有输出就是ok 没有输出就是no
netstat -tunlp| grep nginx && echo "yes" || echo "no"   ##############跟上面一样的判断

--------------------------------------------------------------  shell调用python 基础命令---------------------------------------
#!/bin/bash
a='{"a1":"a11","a22":"a22","a3":"a33"}'
python -c "New=[i for i in $a.values()];print \"\".join(New)"
------------------------------------------------------------
yum -y install MySQL-python* #######安装MySQLdb模块

-----------------------------------------------------------
#!/usr/bin/python
import threading
import time
from conn_mysql import Mysqlconn

class MyThread(threading.Thread):
    def __init__(self,ip):      ###############################这个为传递的参数
        super(MyThread, self).__init__()
        self.ip=ip

    def run(self):
        print("%s %s" %(self.ip,int(time.time())))              ######self.ip  这个类的一些形式 简单而已

if __name__ == '__main__':
        length = Mysqlconn("select server_ip from cmdb_cmdbmanage")
        print(length)
        for i in length:
                t =MyThread(i[0])
                t.start()
	MyThread.join()
-----------------------------------------------------------------

(2.7) >= (1,4)  返回True  比较大小是按照一个数字一个数字比较的

----------------------------------------------------------------------------------
JSONP = 'callbackFunction(["customername1","customername2"])'
def callbackFunction(lists):
    print lists
eval(JSONP)

['customername1', 'customername2']  ################jsonp 格式转换
------------------------------------------------------------------------------------
a= 3

def wangchao():
	if a ==3:
		a = 4
	return a

local variable 'a' referenced before assignment ##########可以这样理解函数虽然没有值 但是程序记下来a是局部变量 但是不知道a的值是多少 所以用到函数的时候系统会纳闷a是局部变量但是a的值我不知道啊 

python 里面除了set有& JavaScript里面不用or and  用 && ||
